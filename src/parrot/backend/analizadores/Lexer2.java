/* The following code was generated by JFlex 1.6.1 */

 package parrot.backend.analizadores;

import java_cup.runtime.*;
import static parrot.backend.analizadores.sym2.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico2.lex</tt>
 */
public class Lexer2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\0"+
    "\1\45\1\47\5\0\1\10\2\0\1\46\1\0\1\12\1\5\11\6"+
    "\2\0\1\13\1\0\1\14\2\0\1\54\1\4\1\30\1\61\1\50"+
    "\1\65\1\4\1\62\1\55\1\63\2\4\1\33\1\51\2\4\1\57"+
    "\1\53\1\64\1\52\1\60\1\4\1\21\2\4\1\56\1\7\1\0"+
    "\1\11\1\0\1\47\1\0\1\26\1\23\1\31\1\24\1\22\1\34"+
    "\1\37\1\35\1\16\2\4\1\40\1\41\1\32\1\20\1\36\1\44"+
    "\1\27\1\15\1\17\1\25\1\43\1\4\1\42\2\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\1\4\0\1\4"+
    "\22\0\1\4\1\0\1\5\2\0\1\6\67\0\1\7"+
    "\32\0\1\10\114\0\1\11\3\0\1\12\24\0\1\13"+
    "\3\0\1\14\1\0\1\15\3\0\1\16\3\0\1\17"+
    "\2\0\1\20\3\0\1\21\2\0\1\22\6\0\1\23"+
    "\3\0\1\24\3\0\1\25\2\0\1\26\3\0\1\27"+
    "\2\0\1\30\1\0\1\31\1\32\1\33\3\0\1\34"+
    "\4\0\1\35\3\0\1\36\1\37\1\0\1\40\2\0"+
    "\1\41\1\42\1\43\3\0\1\44\4\0\1\45\12\0"+
    "\1\46\1\47\14\0\1\50\1\51\1\0\1\52\1\53"+
    "\11\0\1\54\1\0\1\55\1\56\10\0\1\57\6\0"+
    "\1\60\1\61\1\62\1\63\6\0\1\64\2\0\1\65"+
    "\1\66\5\0\1\67\1\70\5\0\1\71\4\0\1\72"+
    "\14\0\1\73\3\0\1\74\7\0\1\75\2\0\1\76"+
    "\7\0\1\77\1\0\1\100\2\0\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\66\0\330\0\u010e"+
    "\0\u0144\0\u017a\0\u01b0\0\u010e\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\66\0\u05b2"+
    "\0\66\0\u05e8\0\u061e\0\66\0\u0654\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\66\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\66\0\u176a"+
    "\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a"+
    "\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca"+
    "\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda"+
    "\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a"+
    "\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea"+
    "\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\66\0\u2772\0\u27a8\0\u27de\0\66"+
    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\66\0\u2c4c\0\u2c82\0\u2cb8"+
    "\0\66\0\u2cee\0\66\0\u2d24\0\u2d5a\0\u2d90\0\66\0\u2dc6"+
    "\0\u2dfc\0\u2e32\0\66\0\u2e68\0\u2e9e\0\66\0\u2ed4\0\u2f0a"+
    "\0\u2f40\0\66\0\u2f76\0\u2fac\0\66\0\u2fe2\0\u3018\0\u304e"+
    "\0\u3084\0\u30ba\0\u30f0\0\66\0\u3126\0\u315c\0\u3192\0\66"+
    "\0\u31c8\0\u31fe\0\u3234\0\66\0\u326a\0\u32a0\0\66\0\u32d6"+
    "\0\u330c\0\u3342\0\66\0\u3378\0\u33ae\0\66\0\u33e4\0\66"+
    "\0\66\0\66\0\u341a\0\u3450\0\u3486\0\66\0\u34bc\0\u34f2"+
    "\0\u3528\0\u355e\0\66\0\u3594\0\u35ca\0\u3600\0\66\0\66"+
    "\0\u3636\0\66\0\u366c\0\u36a2\0\66\0\66\0\66\0\u36d8"+
    "\0\u370e\0\u3744\0\66\0\u377a\0\u37b0\0\u37e6\0\u381c\0\66"+
    "\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc"+
    "\0\u3a02\0\u3a38\0\66\0\66\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10"+
    "\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0"+
    "\0\66\0\66\0\u3cf6\0\66\0\66\0\u3d2c\0\u3d62\0\u3d98"+
    "\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\66\0\u3f12"+
    "\0\66\0\66\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056"+
    "\0\u408c\0\u40c2\0\66\0\u40f8\0\u412e\0\u4164\0\u419a\0\u41d0"+
    "\0\u4206\0\66\0\66\0\66\0\66\0\u423c\0\u4272\0\u42a8"+
    "\0\u42de\0\u4314\0\u434a\0\66\0\u4380\0\u43b6\0\66\0\66"+
    "\0\u43ec\0\u4422\0\u4458\0\u448e\0\u44c4\0\66\0\66\0\u44fa"+
    "\0\u4530\0\u4566\0\u459c\0\u45d2\0\66\0\u4608\0\u463e\0\u4674"+
    "\0\u46aa\0\66\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee"+
    "\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932\0\66\0\u4968"+
    "\0\u499e\0\u49d4\0\66\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2"+
    "\0\u4b18\0\u4b4e\0\66\0\u4b84\0\u4bba\0\66\0\u4bf0\0\u4c26"+
    "\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe\0\u4d34\0\66\0\u4d6a\0\66"+
    "\0\u4da0\0\u4dd6\0\66\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\3\2\1\5\2\2\1\6\1\7"+
    "\52\2\70\0\1\4\63\0\4\10\1\11\1\12\1\13"+
    "\1\10\1\0\1\14\3\10\13\11\1\15\14\11\1\16"+
    "\2\10\5\11\1\17\3\11\1\20\1\11\1\21\2\11"+
    "\12\0\1\22\2\0\1\23\1\24\1\25\1\26\1\0"+
    "\1\27\2\0\1\30\1\31\2\0\1\32\2\0\1\33"+
    "\1\0\1\34\2\0\1\35\1\0\1\36\22\0\11\10"+
    "\1\37\60\10\1\11\1\10\1\40\2\10\1\41\3\10"+
    "\30\11\1\10\20\11\5\10\2\42\2\10\1\37\61\10"+
    "\2\43\2\10\1\44\60\10\1\11\1\10\1\40\2\10"+
    "\1\41\3\10\30\11\1\10\2\11\1\45\15\11\4\10"+
    "\3\46\2\10\1\37\3\10\30\46\3\10\16\46\4\10"+
    "\1\11\1\10\1\40\2\10\1\41\3\10\30\11\1\10"+
    "\10\11\1\47\7\11\4\10\1\11\1\10\1\40\2\10"+
    "\1\41\3\10\30\11\1\10\2\11\1\50\15\11\4\10"+
    "\1\11\1\10\1\40\2\10\1\41\3\10\30\11\1\10"+
    "\12\11\1\51\5\11\15\0\1\52\1\53\1\54\1\55"+
    "\1\0\1\56\2\0\1\57\1\60\2\0\1\61\2\0"+
    "\1\62\1\0\1\63\2\0\1\64\1\0\1\65\40\0"+
    "\1\66\73\0\1\67\14\0\1\70\42\0\1\71\3\0"+
    "\1\72\72\0\1\73\55\0\1\74\63\0\1\75\102\0"+
    "\1\76\5\0\1\77\45\0\1\100\67\0\1\101\71\0"+
    "\1\102\61\0\1\103\61\0\1\104\47\0\4\10\1\11"+
    "\2\40\2\10\1\41\3\10\30\11\1\10\20\11\5\10"+
    "\2\105\2\10\1\37\61\10\2\106\2\10\1\44\60\10"+
    "\1\11\1\10\1\40\2\10\1\41\3\10\30\11\1\10"+
    "\3\11\1\107\14\11\4\10\3\110\2\10\1\37\3\10"+
    "\30\110\3\10\16\110\4\10\1\11\1\10\1\40\2\10"+
    "\1\41\3\10\30\11\1\10\11\11\1\111\6\11\4\10"+
    "\1\11\1\10\1\40\2\10\1\41\3\10\30\11\1\10"+
    "\5\11\1\112\12\11\4\10\1\11\1\10\1\40\2\10"+
    "\1\41\3\10\30\11\1\10\16\11\1\113\1\11\16\0"+
    "\1\114\73\0\1\115\14\0\1\116\42\0\1\117\3\0"+
    "\1\120\72\0\1\121\55\0\1\122\63\0\1\123\102\0"+
    "\1\124\5\0\1\125\45\0\1\126\67\0\1\127\71\0"+
    "\1\130\61\0\1\131\61\0\1\132\66\0\1\133\62\0"+
    "\1\134\77\0\1\135\56\0\1\136\110\0\1\137\41\0"+
    "\1\140\65\0\1\141\74\0\1\142\71\0\1\143\52\0"+
    "\1\144\1\145\106\0\1\146\1\147\55\0\1\150\53\0"+
    "\1\151\4\0\1\152\2\0\1\153\7\0\1\154\60\0"+
    "\1\155\57\0\1\156\41\0\5\10\2\157\2\10\1\37"+
    "\61\10\2\160\2\10\1\44\60\10\1\11\1\10\1\40"+
    "\2\10\1\41\3\10\30\11\1\10\4\11\1\161\13\11"+
    "\4\10\3\162\2\10\1\37\3\10\30\162\3\10\16\162"+
    "\4\10\1\11\1\10\1\40\2\10\1\41\3\10\30\11"+
    "\1\10\12\11\1\163\5\11\4\10\1\11\1\10\1\40"+
    "\2\10\1\41\3\10\30\11\1\10\2\11\1\164\15\11"+
    "\4\10\1\11\1\10\1\40\2\10\1\41\3\10\30\11"+
    "\1\10\4\11\1\165\13\11\17\0\1\166\62\0\1\167"+
    "\77\0\1\170\56\0\1\171\110\0\1\172\41\0\1\173"+
    "\65\0\1\174\74\0\1\175\71\0\1\176\52\0\1\177"+
    "\1\200\106\0\1\201\1\202\55\0\1\203\53\0\1\204"+
    "\4\0\1\205\2\0\1\206\7\0\1\207\60\0\1\210"+
    "\57\0\1\211\57\0\1\212\106\0\1\213\53\0\1\214"+
    "\57\0\1\215\105\0\1\216\72\0\1\217\47\0\1\220"+
    "\74\0\1\221\62\0\1\222\60\0\1\223\60\0\1\224"+
    "\103\0\1\225\64\0\1\226\65\0\1\227\57\0\1\230"+
    "\65\0\1\231\54\0\1\232\74\0\1\233\62\0\1\234"+
    "\43\0\11\10\1\37\34\10\1\235\24\10\2\236\2\10"+
    "\1\44\34\10\1\235\23\10\1\11\1\10\1\40\2\10"+
    "\1\41\3\10\30\11\1\10\5\11\1\237\12\11\4\10"+
    "\3\240\2\10\1\37\3\10\30\240\3\10\16\240\4\10"+
    "\1\11\1\10\1\40\2\10\1\41\3\10\30\11\1\10"+
    "\7\11\1\241\10\11\4\10\1\11\1\10\1\40\2\10"+
    "\1\41\3\10\13\11\1\242\14\11\1\10\20\11\4\10"+
    "\1\11\1\10\1\40\2\10\1\41\3\10\30\11\1\10"+
    "\7\11\1\243\10\11\16\0\1\244\106\0\1\245\53\0"+
    "\1\246\57\0\1\247\105\0\1\250\72\0\1\251\47\0"+
    "\1\252\74\0\1\253\62\0\1\254\60\0\1\255\60\0"+
    "\1\256\103\0\1\257\64\0\1\260\65\0\1\261\57\0"+
    "\1\262\65\0\1\263\54\0\1\264\74\0\1\265\62\0"+
    "\1\266\63\0\1\267\67\0\1\270\103\0\1\271\45\0"+
    "\1\272\67\0\1\273\70\0\1\274\67\0\1\275\56\0"+
    "\1\276\67\0\1\277\72\0\1\300\65\0\1\301\56\0"+
    "\1\302\73\0\1\303\53\0\1\304\73\0\1\305\71\0"+
    "\1\306\71\0\1\307\47\0\1\310\71\0\1\311\45\0"+
    "\5\10\2\312\2\10\1\37\61\10\2\236\2\10\1\44"+
    "\60\10\1\11\1\10\1\40\2\10\1\41\3\10\30\11"+
    "\1\10\6\11\1\313\11\11\4\10\3\314\2\10\1\37"+
    "\3\10\30\314\3\10\16\314\4\10\1\11\1\10\1\40"+
    "\2\10\1\41\3\10\30\11\1\10\2\11\1\315\15\11"+
    "\4\10\1\11\1\10\1\40\2\10\1\41\3\10\30\11"+
    "\1\10\14\11\1\316\3\11\4\10\1\11\1\10\1\40"+
    "\2\10\1\41\3\10\30\11\1\10\17\11\1\317\20\0"+
    "\1\320\67\0\1\321\103\0\1\322\45\0\1\323\67\0"+
    "\1\324\70\0\1\325\67\0\1\326\56\0\1\327\67\0"+
    "\1\330\72\0\1\331\65\0\1\332\56\0\1\333\73\0"+
    "\1\334\53\0\1\335\73\0\1\336\71\0\1\337\71\0"+
    "\1\340\47\0\1\341\71\0\1\342\61\0\1\343\4\0"+
    "\1\344\76\0\1\345\53\0\1\346\61\0\1\347\103\0"+
    "\1\350\55\0\1\351\61\0\1\352\63\0\1\353\77\0"+
    "\1\354\65\0\1\355\53\0\1\356\103\0\1\357\63\0"+
    "\1\360\2\0\1\361\46\0\1\362\105\0\1\363\57\0"+
    "\1\364\53\0\1\365\51\0\5\10\2\366\2\10\1\37"+
    "\60\10\1\11\1\10\1\40\2\10\1\41\3\10\30\11"+
    "\1\10\5\11\1\367\12\11\4\10\3\370\2\10\1\37"+
    "\3\10\30\370\3\10\16\370\4\10\1\11\1\10\1\40"+
    "\2\10\1\41\3\10\30\11\1\10\5\11\1\371\12\11"+
    "\4\10\1\11\1\10\1\40\2\10\1\41\3\10\30\11"+
    "\1\10\6\11\1\372\11\11\4\10\1\11\1\10\1\40"+
    "\2\10\1\41\3\10\30\11\1\10\7\11\1\373\10\11"+
    "\14\0\1\374\4\0\1\375\76\0\1\376\53\0\1\377"+
    "\61\0\1\u0100\103\0\1\u0101\55\0\1\u0102\61\0\1\u0103"+
    "\63\0\1\u0104\77\0\1\u0105\65\0\1\u0106\53\0\1\u0107"+
    "\103\0\1\u0108\63\0\1\u0109\2\0\1\u010a\46\0\1\u010b"+
    "\105\0\1\u010c\57\0\1\u010d\53\0\1\u010e\73\0\1\u010f"+
    "\57\0\1\u0110\65\0\1\u0111\65\0\1\u0112\70\0\1\u0113"+
    "\66\0\1\u0114\76\0\1\u0115\50\0\1\u0116\73\0\1\u0117"+
    "\72\0\1\u0118\56\0\1\u0119\65\0\1\u011a\61\0\1\u011b"+
    "\1\u011c\3\0\1\u011d\44\0\11\10\1\37\34\10\1\u011e"+
    "\23\10\1\11\1\10\1\40\2\10\1\u011f\3\10\30\11"+
    "\1\10\20\11\11\10\1\u0120\60\10\1\11\1\10\1\40"+
    "\2\10\1\41\3\10\30\11\1\10\13\11\1\u0121\4\11"+
    "\4\10\1\11\1\10\1\40\2\10\1\u0122\3\10\30\11"+
    "\1\10\20\11\4\10\1\11\1\10\1\40\2\10\1\41"+
    "\3\10\13\11\1\u0123\14\11\1\10\20\11\22\0\1\u0124"+
    "\57\0\1\u0125\65\0\1\u0126\65\0\1\u0127\70\0\1\u0128"+
    "\66\0\1\u0129\76\0\1\u012a\50\0\1\u012b\73\0\1\u012c"+
    "\72\0\1\u012d\56\0\1\u012e\65\0\1\u012f\61\0\1\u0130"+
    "\1\u0131\3\0\1\u0132\67\0\1\u0133\70\0\1\u0134\67\0"+
    "\1\u0135\2\0\1\u0136\50\0\1\u0137\101\0\1\u0138\55\0"+
    "\1\u0139\67\0\1\u013a\55\0\1\u013b\65\0\1\u013c\73\0"+
    "\1\u013d\43\0\5\10\2\u013e\2\10\1\37\60\10\1\11"+
    "\1\10\1\40\2\10\1\41\3\10\30\11\1\10\6\11"+
    "\1\u013f\11\11\4\10\1\11\1\10\1\40\2\10\1\41"+
    "\3\10\30\11\1\10\6\11\1\u0140\11\11\23\0\1\u0141"+
    "\70\0\1\u0142\67\0\1\u0143\2\0\1\u0144\50\0\1\u0145"+
    "\101\0\1\u0146\55\0\1\u0147\67\0\1\u0148\55\0\1\u0149"+
    "\65\0\1\u014a\73\0\1\u014b\57\0\1\u014c\65\0\1\u014d"+
    "\1\u014e\77\0\1\u014f\56\0\1\u0150\65\0\1\u0151\64\0"+
    "\1\u0152\74\0\1\u0153\55\0\1\u0154\72\0\1\u0155\42\0"+
    "\5\10\2\u0156\2\10\1\37\60\10\1\11\1\10\1\40"+
    "\2\10\1\u0157\3\10\30\11\1\10\20\11\4\10\1\11"+
    "\1\10\1\40\2\10\1\41\3\10\30\11\1\10\5\11"+
    "\1\u0158\12\11\14\0\1\u0159\65\0\1\u015a\1\u015b\77\0"+
    "\1\u015c\56\0\1\u015d\65\0\1\u015e\64\0\1\u015f\74\0"+
    "\1\u0160\55\0\1\u0161\72\0\1\u0162\56\0\1\u0163\73\0"+
    "\1\u0164\67\0\1\u0165\73\0\1\u0166\55\0\1\u0167\74\0"+
    "\1\u0168\70\0\1\u0169\45\0\1\u016a\51\0\11\10\1\u016b"+
    "\60\10\1\11\1\10\1\40\2\10\1\u016c\3\10\30\11"+
    "\1\10\20\11\14\0\1\u016d\73\0\1\u016e\67\0\1\u016f"+
    "\73\0\1\u0170\55\0\1\u0171\74\0\1\u0172\70\0\1\u0173"+
    "\45\0\1\u0174\77\0\1\u0175\55\0\1\u0176\63\0\1\u0177"+
    "\65\0\1\u0178\1\u0179\66\0\1\u017a\65\0\1\u017b\75\0"+
    "\1\u017c\55\0\1\u017d\63\0\1\u017e\65\0\1\u017f\1\u0180"+
    "\66\0\1\u0181\65\0\1\u0182\100\0\1\u0183\70\0\1\u0184"+
    "\45\0\1\u0185\71\0\1\u0186\76\0\1\u0187\65\0\1\u0188"+
    "\70\0\1\u0189\45\0\1\u018a\71\0\1\u018b\76\0\1\u018c"+
    "\52\0\1\u018d\65\0\1\u018e\101\0\1\u018f\61\0\1\u0190"+
    "\55\0\1\u0191\65\0\1\u0192\101\0\1\u0193\61\0\1\u0194"+
    "\57\0\1\u0195\76\0\1\u0196\50\0\1\u0197\102\0\1\u0198"+
    "\54\0\1\u0199\76\0\1\u019a\50\0\1\u019b\102\0\1\u019c"+
    "\66\0\1\u019d\61\0\1\u019e\55\0\1\u019f\101\0\1\u01a0"+
    "\61\0\1\u01a1\55\0\1\u01a2\63\0\1\u01a3\102\0\1\u01a4"+
    "\54\0\1\u01a5\61\0\1\u01a6\102\0\1\u01a7\54\0\1\u01a8"+
    "\63\0\1\u01a9\101\0\1\u01aa\51\0\1\u01ab\101\0\1\u01ac"+
    "\53\0\1\u01ad\61\0\1\u01ae\71\0\1\u01af\61\0\1\u01b0"+
    "\103\0\1\u01b1\65\0\1\u01b2\47\0\1\u01b3\65\0\1\u01b4"+
    "\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\4\0"+
    "\1\1\22\0\1\11\1\0\1\11\2\0\1\11\67\0"+
    "\1\11\32\0\1\11\114\0\1\11\3\0\1\11\24\0"+
    "\1\11\3\0\1\11\1\0\1\11\3\0\1\11\3\0"+
    "\1\11\2\0\1\11\3\0\1\11\2\0\1\11\6\0"+
    "\1\11\3\0\1\11\3\0\1\11\2\0\1\11\3\0"+
    "\1\11\2\0\1\11\1\0\3\11\3\0\1\11\4\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\3\11\3\0"+
    "\1\11\4\0\1\11\12\0\2\11\14\0\2\11\1\0"+
    "\2\11\11\0\1\11\1\0\2\11\10\0\1\11\6\0"+
    "\4\11\6\0\1\11\2\0\2\11\5\0\2\11\5\0"+
    "\1\11\4\0\1\11\14\0\1\11\3\0\1\11\7\0"+
    "\1\11\2\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Simbolo invalido <"+ yytext()+">");
            }
          case 67: break;
          case 2: 
            { /*Nothing to do*/
            }
          case 68: break;
          case 3: 
            { return symbol(SLASH, yytext());
            }
          case 69: break;
          case 4: 
            { return symbol(TEXTO_PARAMETRO, yytext());
            }
          case 70: break;
          case 5: 
            { return symbol(IDENTIFICADOR, yytext());
            }
          case 71: break;
          case 6: 
            { return symbol(ENTERO_PARAMETRO, yytext());
            }
          case 72: break;
          case 7: 
            { return symbol(ID_ABIERTO, yytext());
            }
          case 73: break;
          case 8: 
            { return symbol(ID_CERRADO, yytext());
            }
          case 74: break;
          case 9: 
            { return symbol(PATH_ABIERTO, yytext());
            }
          case 75: break;
          case 10: 
            { return symbol(MENU_ABIERTO, yytext());
            }
          case 76: break;
          case 11: 
            { return symbol(PATH_CERRADO, yytext());
            }
          case 77: break;
          case 12: 
            { return symbol(MENU_CERRADO, yytext());
            }
          case 78: break;
          case 13: 
            { return symbol(SITIO_ABIERTO, yytext());
            }
          case 79: break;
          case 14: 
            { return symbol(TEXTO_ABIERTO, yytext());
            }
          case 80: break;
          case 15: 
            { return symbol(ANCHO_ABIERTO, yytext());
            }
          case 81: break;
          case 16: 
            { return symbol(COLOR_ABIERTO, yytext());
            }
          case 82: break;
          case 17: 
            { return symbol(PADRE_ABIERTO, yytext());
            }
          case 83: break;
          case 18: 
            { return symbol(VIDEO_ABIERTO, yytext());
            }
          case 84: break;
          case 19: 
            { return symbol(SITIO_CERRADO, yytext());
            }
          case 85: break;
          case 20: 
            { return symbol(TEXTO_CERRADO, yytext());
            }
          case 86: break;
          case 21: 
            { return symbol(ANCHO_CERRADO, yytext());
            }
          case 87: break;
          case 22: 
            { return symbol(COLOR_CERRADO, yytext());
            }
          case 88: break;
          case 23: 
            { return symbol(PADRE_CERRADO, yytext());
            }
          case 89: break;
          case 24: 
            { return symbol(VIDEO_CERRADO, yytext());
            }
          case 90: break;
          case 25: 
            { return symbol(IMAGEN_ABIERTO, yytext());
            }
          case 91: break;
          case 26: 
            { return symbol(TITULO_ABIERTO, yytext());
            }
          case 92: break;
          case 27: 
            { return symbol(ORIGEN_ABIERTO, yytext());
            }
          case 93: break;
          case 28: 
            { return symbol(ALTURA_ABIERTO, yytext());
            }
          case 94: break;
          case 29: 
            { return symbol(PAGINA_ABIERTA, yytext());
            }
          case 95: break;
          case 30: 
            { return symbol(CENTRAR_PARAMETRO, yytext());
            }
          case 96: break;
          case 31: 
            { return symbol(HEXADECIMAL_PARAMETRO, yytext());
            }
          case 97: break;
          case 32: 
            { return symbol(DERECHA_PARAMETRO, yytext());
            }
          case 98: break;
          case 33: 
            { return symbol(IMAGEN_CERRADO, yytext());
            }
          case 99: break;
          case 34: 
            { return symbol(TITULO_CERRADO, yytext());
            }
          case 100: break;
          case 35: 
            { return symbol(ORIGEN_CERRADO, yytext());
            }
          case 101: break;
          case 36: 
            { return symbol(ALTURA_CERRADO, yytext());
            }
          case 102: break;
          case 37: 
            { return symbol(PAGINA_CERRADO, yytext());
            }
          case 103: break;
          case 38: 
            { return symbol(PARRAFO_ABIERTO, yytext());
            }
          case 104: break;
          case 39: 
            { return symbol(PAGINAS_ABIERTO, yytext());
            }
          case 105: break;
          case 40: 
            { return symbol(PARRAFO_CERRADO, yytext());
            }
          case 106: break;
          case 41: 
            { return symbol(PAGINAS_CERRADO, yytext());
            }
          case 107: break;
          case 42: 
            { return symbol(SITIO_WEB_ABIERTO, yytext());
            }
          case 108: break;
          case 43: 
            { return symbol(ETIQUETA_ABIERTO, yytext());
            }
          case 109: break;
          case 44: 
            { return symbol(IZQUIERDA_PARAMETRO, yytext());
            }
          case 110: break;
          case 45: 
            { return symbol(SITIO_WEB_CERRADO, yytext());
            }
          case 111: break;
          case 46: 
            { return symbol(ETIQUETA_CERRADO, yytext());
            }
          case 112: break;
          case 47: 
            { return symbol(ETIQUETAS_ABIERTO, yytext());
            }
          case 113: break;
          case 48: 
            { return symbol(PAGINA_WEB_ABIERTO, yytext());
            }
          case 114: break;
          case 49: 
            { return symbol(FECHA_PARAMETRO, yytext());
            }
          case 115: break;
          case 50: 
            { return symbol(JUSTIFICAR_PARAMETRO, yytext());
            }
          case 116: break;
          case 51: 
            { return symbol(ETIQUETAS_CERRADO, yytext());
            }
          case 117: break;
          case 52: 
            { return symbol(PAGINA_WEB_CERRADO, yytext());
            }
          case 118: break;
          case 53: 
            { return symbol(ALINEACION_ABIERTO, yytext());
            }
          case 119: break;
          case 54: 
            { return symbol(COMPONENTE_ABIERTO, yytext());
            }
          case 120: break;
          case 55: 
            { return symbol(ALINEACION_CERRADO, yytext());
            }
          case 121: break;
          case 56: 
            { return symbol(COMPONENTE_CERRADO, yytext());
            }
          case 122: break;
          case 57: 
            { return symbol(COMPONENTES_ABIERTO, yytext());
            }
          case 123: break;
          case 58: 
            { return symbol(COMPONENTES_CERRADO, yytext());
            }
          case 124: break;
          case 59: 
            { return symbol(FECHA_CREACION_ABIERTO, yytext());
            }
          case 125: break;
          case 60: 
            { return symbol(FECHA_CREACION_CERRADO, yytext());
            }
          case 126: break;
          case 61: 
            { return symbol(USUARIO_CREACION_ABIERTO, yytext());
            }
          case 127: break;
          case 62: 
            { return symbol(USUARIO_CREACION_CERRADO, yytext());
            }
          case 128: break;
          case 63: 
            { return symbol(FECHA_MODIFICACION_ABIERTO, yytext());
            }
          case 129: break;
          case 64: 
            { return symbol(FECHA_MODIFICACION_CERRADO, yytext());
            }
          case 130: break;
          case 65: 
            { return symbol(USUARIO_MODIFICACION_ABIERTO, yytext());
            }
          case 131: break;
          case 66: 
            { return symbol(USUARIO_MODIFICACION_CERRADO, yytext());
            }
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym2.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer2 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer2 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer2(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
